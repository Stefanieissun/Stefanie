
  javascript原型和原型链
每个对象都会在其内部初始化一个属性，就是prototype(原型)，当我们访问一个对象的属
性时，如果这个对象内部不存在这个属性，那么他就会去prototype里找这个属性，这个
prototype又会有自己的prototype，于是就这样一直找下去，也就是我们平时所说的原
型链的概念。
关系：
instance.constructor.prototype = instance.__proto__
特点：JavaScript对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属
于自己的原型副本，当我们修改原型时，与之相关的对象也会继承这一改变。
当我们需要一个属性时，JavaScript引擎会先看当前对象中是否有这个属性，如果没有的
话，就会查找它的prototype对象是否有这个属性，如此递推下去，一致检索到Object内建对象。



JavaScript的类型
栈：原始数据类型（Undefined，Null，Boolean，Number，String）
堆：引用数据类型（对象、数组、函数，Date，Exp）
两种类型的区别：
//存储位置不同
原始数据类型直接存储在栈(stack)中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储；
引用数据类型存储在堆(heap)中的对象,占据空间大、大小不固定,如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。


继承方式
1构造函数
2原型继承
3实例继承
4拷贝继承


new操作符干了什么、
(1)创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。
(2)属性和方法被加入到 this 引用的对象中。
(3)新创建的对象由 this 所引用，并且最后隐式的返回 this 。